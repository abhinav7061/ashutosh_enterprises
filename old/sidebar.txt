"use client"
import { LucideLogOut, Slack, ChevronDown, ChevronRight, PieChart } from 'lucide-react'
import Image from 'next/image';
import Link from 'next/link';
import { usePathname } from 'next/navigation';
import React, { useState, useEffect, useRef } from 'react';
import Dropdown from './Dropdown';
import { sidebarLinks, catalogItems } from '@/constants/sidebar';

const Sidebar = ({ setShowSidebar, showSidebar }) => {
    const pathname = usePathname();
    const sidebarRef = useRef(null);

    const handleClickOutside = (event) => {
        if (sidebarRef.current && !sidebarRef.current.contains(event.target) && window.innerWidth < 1024) {
            setShowSidebar(false);
        }
    };

    useEffect(() => {
        if (showSidebar) {
            document.addEventListener('click', handleClickOutside);
        } else {
            document.removeEventListener('click', handleClickOutside);
        }
        return () => {
            document.removeEventListener('click', handleClickOutside);
        };
    }, [showSidebar]);

    const [catalogOpened, setCatalogOpened] = useState(false);

    return (
        <div
            ref={sidebarRef}
            className={` ${showSidebar ? 'w-60 lg:w-0' : 'w-0 lg:w-60'} transition-all duration-700 overflow-x-hidden bg-slate-50 dark:bg-slate-800 space-y-6 overflow-y-auto h-screen text-slate-700 font-bold dark:text-slate-300 fixed left-0 top-0 z-10 pt-16 lg:pt-0 pb-4 shadow-md`}
        >
            <div className='flex justify-center pt-6'>
                <Link href="#">
                    <Image src='/next.svg' width={80} height={56} alt='Logo' />
                </Link>
            </div>
            <div className="space-y-3 flex flex-col ">
                <Link href='/dashboard' onClick={() => setShowSidebar(false)} className={`flex items-center gap-3 px-4 py-2 ${pathname === '/dashboard' ? 'border-l-4 border-green-600 text-green-600' : 'dark:hover:text-white hover:text-slate-950 hover:bg-slate-200 dark:hover:bg-slate-900'}`}><PieChart height={20} /><h3>Dashboard</h3></Link>
                {/* Catalogues in sidebar */}
                <div>
                    <Dropdown dilogProperty='flex justify-center' button={
                        <CatalogBtn pathname={pathname} dilogOpened={catalogOpened} />
                    } className='flex flex-col gap-3 w-full' opened={setCatalogOpened}>
                        <ul className='bg-slate-100 dark:bg-slate-900 px-4 py-2 rounded-lg space-y-2 flex flex-col items-start text-xs w-min max-w-48 overflow-auto'>
                            {
                                catalogItems.map((item, i) => {
                                    return (
                                        <li key={i} className=' min-w-full'><Link href={item.link} onClick={() => setShowSidebar(false)} className={`text-start py-1 px-3 rounded-md flex items-center gap-2  ${pathname == item.link ? 'text-green-600' : 'hover:text-slate-950 hover:bg-slate-200 dark:hover:bg-slate-300 '}`}><span>{item.icon}</span>{item.name}</Link></li>
                                    )
                                })
                            }
                        </ul>
                    </Dropdown>
                </div>
                {
                    sidebarLinks.map((item, i) => {
                        return (
                            <Link href={item.link} key={i} onClick={() => setShowSidebar(false)} className={`flex items-center gap-3 px-4 py-2 ${item.link === pathname ? 'border-l-4 border-green-600 text-green-600' : 'dark:hover:text-white hover:text-slate-950 hover:bg-slate-200 dark:hover:bg-slate-900'}`}>{item.icon}<h3>{item.name}</h3></Link>
                        )
                    })
                }
            </div>
            <div className='bg-green-700 hover:bg-green-600 text-slate-100 rounded-lg flex gap-2 items-center justify-center px-4 py-2 mx-3 cursor-pointer'><LucideLogOut /><p>Logout</p></div>
        </div>
    );
};

Sidebar.displayName = "sidebar";

export default Sidebar;


const CatalogBtn = ({ pathname, dilogOpened }) => {
    return (
        <button className={`flex items-center gap-4 w-full px-4 py-2 ${catalogItems.some(item => item.link === pathname) ? 'border-l-4 border-green-600 text-green-600' : 'dark:hover:text-white hover:text-slate-950 hover:bg-slate-200 dark:hover:bg-slate-900'}`}>
            <div className='flex gap-3 items-center'>
                <Slack height={20} />
                <h3>Catalogs</h3>
            </div>
            <div className='relative'><div className=' w-full h-full absolute'></div>{dilogOpened ? <ChevronDown /> : <ChevronRight />}</div>
        </button>
    )
}
